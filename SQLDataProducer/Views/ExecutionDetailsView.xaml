<!-- Copyright 2012 Peter Henell

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http:www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.-->

<UserControl x:Class="SQLDataProducer.Views.ExecutionDetailsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:me="clr-namespace:SQLDataProducer.ViewModels"
             
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:enums="clr-namespace:SQLDataProducer.Entities;assembly=SQLDataProducer.Entities"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="800"
             >
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="visiConv" />

        <ObjectDataProvider x:Key="executionConditionEnum"
                MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="enums:ExecutionConditions"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>


        <Style TargetType="Button" x:Key="VisibleIfValueFromOtherColumnGenerator">
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding ParameterName}" Value="Referenced Column" >
                    <Setter Property="Visibility" Value="Visible" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="TextBox" x:Key="NotEnabledIfValueFromOtherColumnGenerator">
            <Setter Property="IsEnabled" Value="True" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding ParameterName}" Value="Referenced Column" >
                    <Setter Property="IsEnabled" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ContentControl" x:Key="ParameterConfigurationStyle">
            <Setter Property="Content">
                <Setter.Value>
                    <TextBox Text="{Binding Path=Value, Mode=TwoWay}" Visibility="Visible" />
                </Setter.Value>
            </Setter>
            <Setter Property="IsEnabled" Value="True" />

            <Style.Triggers>
                <!--<DataTrigger Binding="{Binding ParameterName}" Value="DATE">
                    <Setter Property="Content">
                        <Setter.Value>
                            <DatePicker DisplayDate="{Binding Value, Mode=TwoWay}" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>-->
                <DataTrigger Binding="{Binding ParameterName}" Value="Referenced Column" >
                    <Setter Property="IsEnabled" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

    </UserControl.Resources>


    <Grid IsEnabled="{Binding Model.HaveExecutionItemSelected}">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="25*" />
            <ColumnDefinition Width="25*" />
            <ColumnDefinition Width="50*" />
        </Grid.ColumnDefinitions>

       

        <GroupBox Grid.Row="1" Grid.ColumnSpan="3">
            <Grid >
                <Grid.RowDefinitions>
                    <RowDefinition Height="50" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50*" />
                    <ColumnDefinition Width="50*" />
                </Grid.ColumnDefinitions>

                <DataGrid ItemsSource="{Binding Path=Model.SelectedExecutionItem.TargetTable.Columns, Mode=OneWay}" 
                            Grid.Row="0" 
                            Grid.RowSpan="2" 
                            AutoGenerateColumns="false" 
                            IsReadOnly="True" 
                            SelectionMode="Single"
                            SelectionUnit="FullRow"
                            SelectedItem="{Binding Model.SelectedColumn, Mode=TwoWay}"
                            Style="{DynamicResource ResourceKey=DataGridDemoStyle}"
                          >
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding ColumnName}" Header="Column Name" IsReadOnly="True" />
                        <DataGridTextColumn Binding="{Binding ColumnDataType}" Header="Data Type" IsReadOnly="True" />
                        <DataGridCheckBoxColumn IsReadOnly="True" Binding="{Binding ColumnDataType.IsNullable}" Header="Nullable?" />

                        <DataGridTemplateColumn CanUserResize="False">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Image 
                                Source="/SQLDataProducer;component/Styles/Warning.png" ToolTip="{Binding WarningText}" Visibility="{Binding HasWarning, Converter={StaticResource ResourceKey=visiConv}}"  />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn Header="Data Generator">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel>
                                        <TextBlock Text="{Binding Generator.GeneratorName}" Height="25" />
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridCheckBoxColumn Binding="{Binding HasConstraints, Mode=OneWay}" Width="110"
                                            Header="Has Constraints?" IsReadOnly="True"/>
                        <DataGridTextColumn Binding="{Binding Generator.GeneratorParameters.NiceString}" Width="*"
                                            Header="Parameters" IsReadOnly="True"/>


                    </DataGrid.Columns>
                </DataGrid>
                <GroupBox Header="Select Generator" Grid.Column="1" Grid.Row="0">
                    <ComboBox  
                        ItemsSource="{Binding Model.SelectedColumn.PossibleGenerators}"
                        SelectedItem="{Binding Model.SelectedColumn.Generator, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Height="25" >
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding GeneratorName}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </GroupBox>

                <GroupBox Header="Configure the Parameters for the Generator" Grid.Column="1" Grid.Row="1">
                    <StackPanel>
                        <ListBox
                        ItemsSource="{Binding Model.SelectedColumn.Generator.GeneratorParameters}" 
                          VerticalAlignment="Stretch">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid 
                                        Visibility="{Binding IsWriteEnabled, Converter={StaticResource ResourceKey=visiConv}}"
                                        HorizontalAlignment="Stretch" 
                                        VerticalAlignment="Stretch">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="150" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Text="{Binding ParameterName}" Grid.Column="0" Margin="3 3 3 3" />

                                        <TextBox Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}"  Grid.Column="1" MinWidth="150" Style="{StaticResource ResourceKey=NotEnabledIfValueFromOtherColumnGenerator}"/>
                                        <!--<ContentControl 
                                                        Style="{StaticResource ResourceKey=ParameterConfigurationStyle}" 
                                                        Grid.Column="1" 
                                                        MinWidth="150" 
                                                        HorizontalAlignment="Left" />-->

                                        <Button Content="Pick Column" Grid.Column="2"
                                                Command="{Binding Path=DataContext.ConfigureReferenceParameterCommand, 
                                                RelativeSource={RelativeSource FindAncestor, 
                                                AncestorType={x:Type ListBox}}}" 
                                                CommandParameter="{Binding .}" 
                                                Style="{StaticResource ResourceKey=VisibleIfValueFromOtherColumnGenerator}"
                                            >
                                        </Button>

                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                        <GroupBox Header="Generator Description" Margin="0 5 0 0">
                            <TextBlock Text="{Binding Model.SelectedColumn.Generator.GeneratorHelpText}" TextWrapping="Wrap" />
                        </GroupBox>
                        <GroupBox Header="Column Constraints" Margin="0 5 0 0">
                            <TextBlock Text="{Binding Model.SelectedColumn.Constraints, Mode=OneWay}" TextWrapping="Wrap"  />
                        </GroupBox>
                    </StackPanel>
                </GroupBox>
            </Grid>
        </GroupBox>

    </Grid>

</UserControl>
